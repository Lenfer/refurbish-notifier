var http = require('http');
var Vow = require('vow');
var log = require('refurbish-notifier-logger')('RefurbishParser');
var cheerio = require('cheerio');
var _ = require('lodash');
var moment = require('moment');

function RefurbishNotifierParser(options) {
	this.url = options.url;
	this._fakes = options.fakes;
}


RefurbishParser.prototype.get = function() {
	var promise = Vow.promise();
	var refurbishParser = this;
	http.get(this.url, function(res) {
		var pageDom = '';
		log.info('Get %s, status: %s', refurbishParser.url, res.statusCode);
		log.debug('Headers:', JSON.stringify(res.headers));
		res.setEncoding('utf8');
		res.on('data', function (chunk) {
			pageDom += chunk;
		});
		res.on('end', function() {
			promise.fulfill(cheerio.load(pageDom));
		});
	}).on('error', function(e) {
		promise.reject(e);
	});
	return promise;
};


function extractData(el) {
	var item = {};

	var elUrl = el.find('.specs a');
	/**
	 * Extract UID
	 */
	var href = elUrl[0].attribs.href;
	item.uid = href.match(/^\/us\/product\/([0-9A-Z]+)\//)[1];

	/**
	 * Extarct name
	 */
	item.name = _.trim(elUrl.html());


	/**
	 * Extarct description
	 */
	var specs = el.find('.specs');
	specs.find('h3').remove();
	specs.find('p').remove();
	item.description = _.trim(specs.text());

	/**
	 * Extract data released
	 */
	var releasedText = item.description.split('\n')[0];
	var date = releasedText.match(/\w+ \d+/);
	item.origReleased2 = date[0];
	item.origReleased = moment(date[0], 'MMMM YYYY')._d;

	/**
	 * Extract price
	 */
	item.price = _.trim(el.find('.price').text());

	var savings = el.find('.savings').text();
	savings = _.map(savings.split('\n'), function(el) {
		return _.trim(el);
	});
	item.savings = _.compact(savings);

	return item;
}


RefurbishParser.prototype.parse = function() {
	var promise = Vow.promise();
	var refurbishParser = this;
	this.get()
		.then(function(html) {
			var elems = html('.product');
			log.debug('Parser find %s products on page', elems.length);
			var data = _.reduce(elems, function(result, el) {
				result.push(extractData(html(el)));
				return result;
			}, []);
			promise.fulfill(data);
		})
		.fail(function(e) {
			promise.reject(e);
		});
	return promise;
};



// http://store.apple.com/us/browse/home/specialdeals/mac/macbook_pro/13
var grabber = new RefurbishParser({
	url: 'http://store.apple.com/us/browse/home/specialdeals/mac/macbook_pro/13'
});

grabber.parse()
	.then(function(items) {
		_.each(items, function(item) {
			console.log(item);
		});
	})
	.fail(function(e) {
		log.error(e);
	});

// http.createServer(function(){}).listen(3000)
