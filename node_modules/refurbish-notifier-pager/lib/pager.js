var Handlebars = require('handlebars');
var _ = require('lodash');
var moment = require('moment');
var fs = require('fs');
var path = require('path');
var log = require('refurbish-notifier-logger')('pager');
var currencies = require('refurbish-notifier-helpers').currencies

/**
 * Помощник для выполнения математических выражений внутри шаблона
 * @private
 *
 * @example
 * {{#math A '+' B 2}}
 */
Handlebars.registerHelper('math', function(lvalue, operator, rvalue, round, options) {
	lvalue = parseFloat(lvalue);
	rvalue = parseFloat(rvalue);
	round = isNaN(round) ? 2 : round;
	var result = {
		"+": lvalue + rvalue,
		"-": lvalue - rvalue,
		"*": lvalue * rvalue,
		"/": lvalue / rvalue,
		"%": lvalue % rvalue
	}[operator]
	return result.toFixed(round);
});

/**
 * Потдержка moment в шаблонах
 */
Handlebars.registerHelper('moment', function (context, block) {
	if (context && context.hash) {
		block = _.cloneDeep(context);
		context = undefined;
	}
	var date = moment(context);

	// Reset the language back to default before doing anything else
	date.locale('ru');

	for (var i in block.hash) {
		if (date[i]) {
			date = date[i](block.hash[i]);
		} else {
			console.log('moment.js does not support "' + i + '"');
		}
	}
	return date;
});


/**
 * Преобразует EOL в BR
 */
Handlebars.registerHelper('breaklines', function(text) {
	text = Handlebars.Utils.escapeExpression(text);
	text = text.replace(/(\r\n|\n|\r)/gm, '<br>');
	return new Handlebars.SafeString(text);
});

/**
 * Объект с шаблонами (имена параметров соответствую именам файлов)
 * @type {Object}
 */
var pages = {};

/**
 * Директория с шаблонами
 * @type {String}
 */
var templateDir = path.normalize(__dirname + '/../templates');

/**
 * Считываем файл из директории и компилируем его в Handlebars функцию
 * @param {String} filepath Путь к файлу
 * @returns {Function}
 * @private
 */
function initTemplate(filepath) {
	var basename = path.basename(filepath, '.handlebars');
	log.info('Prepare template "%s"', basename);
	try {
		var tmpl = fs.readFileSync(filepath).toString();
		pages[basename] = Handlebars.compile(tmpl);
	} catch(e) {
		log.error(e);
	}
}

// Перебираем все фалы в каталоге с шаблонами
_.each(fs.readdirSync(templateDir), function(fn) {
	try {
		var filepath = path.join(templateDir, fn);
		var fileStat = fs.statSync(filepath);
		// Если это файл, то компилируем шаблон
		if(fileStat.isFile()) {
			initTemplate(filepath);
		}
	} catch(e) {
		log.error(e);
	}
});



/**
 * Возвращает страницу сгенерированную по параметрам в options
 * @param {Object} options Объект настроек
 * @param {Object} [options.data={}] Данные для отрисовки шаблонизатором
 * @param {String} [options.page="404"] Имя шаблона в папке templates
 * @returns {Object}
 */
module.exports = function (options) {
	var page = pages[options.name] || pages['404'];
	var data = options.data || {};
	var html = '';
	// Подмешиваем статику
	data.USD = currencies();

	log.info('Render page "%s":', options.name, JSON.stringify(options));
	// Пробуем отрисовать страницу
	try {
		html = page(data);
	} catch (e) {
		log.error(e);
		html = e.message + ' :: ' + e.stack;
	}
	return {
		html: html
	};
};
