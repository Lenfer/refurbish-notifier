var http = require('http');
var Vow = require('vow');
var log = require('refurbish-notifier-logger')('helper-currencies');
var _ = require('lodash');

/**
 * Адрес для получения курса валют
 * @type {String}
 */
var rateUrl = [
	'http://query.yahooapis.com/v1/public/yql?',
	'q=select+*+from+yahoo.finance.xchange+where+pair+=+%22USDRUB,EURRUB%22',
	'&format=json',
	'&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys',
	'&callback='
].join('');

/**
 * Курсы валют
 * @type {Object}
 */
var currencies = {};

/**
 * Интервал обновления
 * @type {Number}
 */
var interval = 60*60*1000;

/**
 * Обновляем курсы валют
 * @private
 */
function updateCurrencies() {
	http.get(rateUrl, function(res){
		var answer = '';
		log.info('Update currencies, status: %s', res.statusCode);
		// Данные пришли - плюсуем
		res.on('data', function (chunk) {
			answer += chunk;
		});
		// Все данные пришли - парсим и обновляем глобальный объект
		res.on('end', function() {
			try {
				var data = JSON.parse(answer);
			} catch (e) {
				return log.error('Error on parse JSON: %s', e.message);
			}
			if (data.query && data.query.results && data.query.results.rate) {
				_.each(data.query.results.rate, function(item) {
					log.debug('Set value of currency %s to %s', item.id, item.Rate);
					currencies[item.id] = parseFloat(item.Rate);
				});
			} else {
				log.error('Wrong answer');
			}
		});
	}).on('error', function(e) {
		log.error(e);
	});

}

/**
 * Возвращает значение курса валюты
 * @param {String} [id=USD] Код валюты
 * @returns {Number}
 */
function getCurrencies(id) {
	var key = ((id || 'USD') + 'RUB').toUpperCase();
	return currencies[key] || 0;
}

// Обновляем курсы
updateCurrencies();
setInterval(updateCurrencies, interval);

module.exports = getCurrencies;